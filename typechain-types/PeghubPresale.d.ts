/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PeghubPresaleInterface extends ethers.utils.Interface {
  functions: {
    "availableTokens()": FunctionFragment;
    "bomb()": FunctionFragment;
    "btcb()": FunctionFragment;
    "buyWithBomb(uint256)": FunctionFragment;
    "buyWithBtcb(uint256)": FunctionFragment;
    "governanceRecoverUnsupported(address,uint256,address)": FunctionFragment;
    "operator()": FunctionFragment;
    "peghub()": FunctionFragment;
    "reserveFund()": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setReserveFund(address)": FunctionFragment;
    "soldTokens()": FunctionFragment;
    "startTime()": FunctionFragment;
    "totalTokens()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "availableTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bomb", values?: undefined): string;
  encodeFunctionData(functionFragment: "btcb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyWithBomb",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithBtcb",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceRecoverUnsupported",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "peghub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reserveFund",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setReserveFund",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "soldTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "availableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bomb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btcb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyWithBomb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyWithBtcb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceRecoverUnsupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peghub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "soldTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalTokens",
    data: BytesLike
  ): Result;

  events: {
    "Purchase(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Purchase"): EventFragment;
}

export type PurchaseEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export class PeghubPresale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PeghubPresaleInterface;

  functions: {
    availableTokens(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _tokens: BigNumber }>;

    bomb(overrides?: CallOverrides): Promise<[string]>;

    btcb(overrides?: CallOverrides): Promise<[string]>;

    buyWithBomb(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyWithBtcb(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governanceRecoverUnsupported(
      _token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    peghub(overrides?: CallOverrides): Promise<[string]>;

    reserveFund(overrides?: CallOverrides): Promise<[string]>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveFund(
      _reserveFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    soldTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTokens(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  availableTokens(overrides?: CallOverrides): Promise<BigNumber>;

  bomb(overrides?: CallOverrides): Promise<string>;

  btcb(overrides?: CallOverrides): Promise<string>;

  buyWithBomb(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyWithBtcb(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governanceRecoverUnsupported(
    _token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  operator(overrides?: CallOverrides): Promise<string>;

  peghub(overrides?: CallOverrides): Promise<string>;

  reserveFund(overrides?: CallOverrides): Promise<string>;

  setOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveFund(
    _reserveFund: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  soldTokens(overrides?: CallOverrides): Promise<BigNumber>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  totalTokens(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    availableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    bomb(overrides?: CallOverrides): Promise<string>;

    btcb(overrides?: CallOverrides): Promise<string>;

    buyWithBomb(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyWithBtcb(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    governanceRecoverUnsupported(
      _token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    operator(overrides?: CallOverrides): Promise<string>;

    peghub(overrides?: CallOverrides): Promise<string>;

    reserveFund(overrides?: CallOverrides): Promise<string>;

    setOperator(_operator: string, overrides?: CallOverrides): Promise<void>;

    setReserveFund(
      _reserveFund: string,
      overrides?: CallOverrides
    ): Promise<void>;

    soldTokens(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokens(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Purchase(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Purchase(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    availableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    bomb(overrides?: CallOverrides): Promise<BigNumber>;

    btcb(overrides?: CallOverrides): Promise<BigNumber>;

    buyWithBomb(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyWithBtcb(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governanceRecoverUnsupported(
      _token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    peghub(overrides?: CallOverrides): Promise<BigNumber>;

    reserveFund(overrides?: CallOverrides): Promise<BigNumber>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveFund(
      _reserveFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    soldTokens(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokens(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    availableTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bomb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    btcb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyWithBomb(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyWithBtcb(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governanceRecoverUnsupported(
      _token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peghub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveFund(
      _reserveFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    soldTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
